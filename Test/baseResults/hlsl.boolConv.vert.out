hlsl.boolConv.vert
Shader version: 500
0:? Sequence
0:1  Sequence
0:1    move second child to first child ( temp bool)
0:1      'b' ( global bool)
0:1      Constant:
0:1        true (const bool)
0:3  Function Definition: @main( ( temp 4-component vector of float)
0:3    Function Parameters: 
0:?     Sequence
0:4      Sequence
0:4        move second child to first child ( temp int)
0:4          'r' ( temp int)
0:4          Constant:
0:4            0 (const int)
0:6      add second child into first child ( temp int)
0:6        'r' ( temp int)
0:6        add ( temp int)
0:6          Convert bool to int ( temp int)
0:6            'a' ( global bool)
0:6          Convert bool to int ( temp int)
0:6            'b' ( global bool)
0:7      add second child into first child ( temp int)
0:7        'r' ( temp int)
0:7        subtract ( temp int)
0:7          Convert bool to int ( temp int)
0:7            'a' ( global bool)
0:7          Convert bool to int ( temp int)
0:7            'b' ( global bool)
0:8      add second child into first child ( temp int)
0:8        'r' ( temp int)
0:8        component-wise multiply ( temp int)
0:8          Convert bool to int ( temp int)
0:8            'a' ( global bool)
0:8          Convert bool to int ( temp int)
0:8            'b' ( global bool)
0:9      add second child into first child ( temp int)
0:9        'r' ( temp int)
0:9        divide ( temp int)
0:9          Convert bool to int ( temp int)
0:9            'a' ( global bool)
0:9          Convert bool to int ( temp int)
0:9            'b' ( global bool)
0:10      add second child into first child ( temp int)
0:10        'r' ( temp int)
0:10        mod ( temp int)
0:10          Convert bool to int ( temp int)
0:10            'a' ( global bool)
0:10          Convert bool to int ( temp int)
0:10            'b' ( global bool)
0:12      add second child into first child ( temp int)
0:12        'r' ( temp int)
0:12        bitwise and ( temp int)
0:12          Convert bool to int ( temp int)
0:12            'a' ( global bool)
0:12          Convert bool to int ( temp int)
0:12            'b' ( global bool)
0:13      add second child into first child ( temp int)
0:13        'r' ( temp int)
0:13        inclusive-or ( temp int)
0:13          Convert bool to int ( temp int)
0:13            'a' ( global bool)
0:13          Convert bool to int ( temp int)
0:13            'b' ( global bool)
0:14      add second child into first child ( temp int)
0:14        'r' ( temp int)
0:14        exclusive-or ( temp int)
0:14          Convert bool to int ( temp int)
0:14            'a' ( global bool)
0:14          Convert bool to int ( temp int)
0:14            'b' ( global bool)
0:16      add second child into first child ( temp int)
0:16        'r' ( temp int)
0:16        left-shift ( temp int)
0:16          Convert bool to int ( temp int)
0:16            'a' ( global bool)
0:16          Convert bool to int ( temp int)
0:16            'b' ( global bool)
0:17      add second child into first child ( temp int)
0:17        'r' ( temp int)
0:17        right-shift ( temp int)
0:17          Convert bool to int ( temp int)
0:17            'a' ( global bool)
0:17          Convert bool to int ( temp int)
0:17            'b' ( global bool)
0:19      Branch: Return with expression
0:19        Construct vec4 ( temp 4-component vector of float)
0:19          Convert int to float ( temp float)
0:19            'r' ( temp int)
0:3  Function Definition: main( ( temp void)
0:3    Function Parameters: 
0:?     Sequence
0:3      move second child to first child ( temp 4-component vector of float)
0:?         '@entryPointOutput' ( out 4-component vector of float Position)
0:3        Function Call: @main( ( temp 4-component vector of float)
0:?   Linker Objects
0:?     'a' ( global bool)
0:?     'b' ( global bool)
0:?     '@entryPointOutput' ( out 4-component vector of float Position)


Linked vertex stage:


Shader version: 500
0:? Sequence
0:1  Sequence
0:1    move second child to first child ( temp bool)
0:1      'b' ( global bool)
0:1      Constant:
0:1        true (const bool)
0:3  Function Definition: @main( ( temp 4-component vector of float)
0:3    Function Parameters: 
0:?     Sequence
0:4      Sequence
0:4        move second child to first child ( temp int)
0:4          'r' ( temp int)
0:4          Constant:
0:4            0 (const int)
0:6      add second child into first child ( temp int)
0:6        'r' ( temp int)
0:6        add ( temp int)
0:6          Convert bool to int ( temp int)
0:6            'a' ( global bool)
0:6          Convert bool to int ( temp int)
0:6            'b' ( global bool)
0:7      add second child into first child ( temp int)
0:7        'r' ( temp int)
0:7        subtract ( temp int)
0:7          Convert bool to int ( temp int)
0:7            'a' ( global bool)
0:7          Convert bool to int ( temp int)
0:7            'b' ( global bool)
0:8      add second child into first child ( temp int)
0:8        'r' ( temp int)
0:8        component-wise multiply ( temp int)
0:8          Convert bool to int ( temp int)
0:8            'a' ( global bool)
0:8          Convert bool to int ( temp int)
0:8            'b' ( global bool)
0:9      add second child into first child ( temp int)
0:9        'r' ( temp int)
0:9        divide ( temp int)
0:9          Convert bool to int ( temp int)
0:9            'a' ( global bool)
0:9          Convert bool to int ( temp int)
0:9            'b' ( global bool)
0:10      add second child into first child ( temp int)
0:10        'r' ( temp int)
0:10        mod ( temp int)
0:10          Convert bool to int ( temp int)
0:10            'a' ( global bool)
0:10          Convert bool to int ( temp int)
0:10            'b' ( global bool)
0:12      add second child into first child ( temp int)
0:12        'r' ( temp int)
0:12        bitwise and ( temp int)
0:12          Convert bool to int ( temp int)
0:12            'a' ( global bool)
0:12          Convert bool to int ( temp int)
0:12            'b' ( global bool)
0:13      add second child into first child ( temp int)
0:13        'r' ( temp int)
0:13        inclusive-or ( temp int)
0:13          Convert bool to int ( temp int)
0:13            'a' ( global bool)
0:13          Convert bool to int ( temp int)
0:13            'b' ( global bool)
0:14      add second child into first child ( temp int)
0:14        'r' ( temp int)
0:14        exclusive-or ( temp int)
0:14          Convert bool to int ( temp int)
0:14            'a' ( global bool)
0:14          Convert bool to int ( temp int)
0:14            'b' ( global bool)
0:16      add second child into first child ( temp int)
0:16        'r' ( temp int)
0:16        left-shift ( temp int)
0:16          Convert bool to int ( temp int)
0:16            'a' ( global bool)
0:16          Convert bool to int ( temp int)
0:16            'b' ( global bool)
0:17      add second child into first child ( temp int)
0:17        'r' ( temp int)
0:17        right-shift ( temp int)
0:17          Convert bool to int ( temp int)
0:17            'a' ( global bool)
0:17          Convert bool to int ( temp int)
0:17            'b' ( global bool)
0:19      Branch: Return with expression
0:19        Construct vec4 ( temp 4-component vector of float)
0:19          Convert int to float ( temp float)
0:19            'r' ( temp int)
0:3  Function Definition: main( ( temp void)
0:3    Function Parameters: 
0:?     Sequence
0:3      move second child to first child ( temp 4-component vector of float)
0:?         '@entryPointOutput' ( out 4-component vector of float Position)
0:3        Function Call: @main( ( temp 4-component vector of float)
0:?   Linker Objects
0:?     'a' ( global bool)
0:?     'b' ( global bool)
0:?     '@entryPointOutput' ( out 4-component vector of float Position)

// Module Version 10000
// Generated by (magic number): 8000b
// Id's are bound by 99

                              Capability Shader
            11_1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 54_1  "main" 59_3
                              Source HLSL 500
                              Name 54_1  "main"
                              Name 54_2  "@main("
                              Name 59_1  "b"
                              Name 59_4  "r"
                              Name 59_2  "a"
                              Name 59_3  "@entryPointOutput"
                              Decorate 59_3(@entryPointOutput) BuiltIn Position
            19_1:             TypeVoid
            33_1:             TypeFunction 19_1
            22_1:             TypeFloat 32
            23_1:             TypeVector 22_1(float) 4
            33_2:             TypeFunction 23_1(fvec4)
            20_1:             TypeBool
            32_1:             TypePointer Private 20_1(bool)
         59_1(b):   32_1(ptr) Variable Private
            41_1:  20_1(bool) ConstantTrue
            21_1:             TypeInt 32 1
            32_2:             TypePointer Function 21_1(int)
            43_1:   21_1(int) Constant 0
         59_2(a):   32_1(ptr) Variable Private
            43_2:   21_1(int) Constant 1
            32_3:             TypePointer Output 23_1(fvec4)
59_3(@entryPointOutput):   32_3(ptr) Variable Output
      54_1(main):        19_1 Function None 33_1
           248_1:             Label
                              Store 59_1(b) 41_1
            57_1: 23_1(fvec4) FunctionCall 54_2(@main()
                              Store 59_3(@entryPointOutput) 57_1
                              Return
                              FunctionEnd
    54_2(@main(): 23_1(fvec4) Function None 33_2
           248_2:             Label
         59_4(r):   32_2(ptr) Variable Function
                              Store 59_4(r) 43_1
            61_1:  20_1(bool) Load 59_2(a)
           169_1:   21_1(int) Select 61_1 43_2 43_1
            61_2:  20_1(bool) Load 59_1(b)
           169_2:   21_1(int) Select 61_2 43_2 43_1
           128_1:   21_1(int) IAdd 169_1 169_2
            61_3:   21_1(int) Load 59_4(r)
           128_2:   21_1(int) IAdd 61_3 128_1
                              Store 59_4(r) 128_2
            61_4:  20_1(bool) Load 59_2(a)
           169_3:   21_1(int) Select 61_4 43_2 43_1
            61_5:  20_1(bool) Load 59_1(b)
           169_4:   21_1(int) Select 61_5 43_2 43_1
           130_1:   21_1(int) ISub 169_3 169_4
            61_6:   21_1(int) Load 59_4(r)
           128_3:   21_1(int) IAdd 61_6 130_1
                              Store 59_4(r) 128_3
            61_7:  20_1(bool) Load 59_2(a)
           169_5:   21_1(int) Select 61_7 43_2 43_1
            61_8:  20_1(bool) Load 59_1(b)
           169_6:   21_1(int) Select 61_8 43_2 43_1
           132_1:   21_1(int) IMul 169_5 169_6
            61_9:   21_1(int) Load 59_4(r)
           128_4:   21_1(int) IAdd 61_9 132_1
                              Store 59_4(r) 128_4
           61_10:  20_1(bool) Load 59_2(a)
           169_7:   21_1(int) Select 61_10 43_2 43_1
           61_11:  20_1(bool) Load 59_1(b)
           169_8:   21_1(int) Select 61_11 43_2 43_1
           135_1:   21_1(int) SDiv 169_7 169_8
           61_12:   21_1(int) Load 59_4(r)
           128_5:   21_1(int) IAdd 61_12 135_1
                              Store 59_4(r) 128_5
           61_13:  20_1(bool) Load 59_2(a)
           169_9:   21_1(int) Select 61_13 43_2 43_1
           61_14:  20_1(bool) Load 59_1(b)
          169_10:   21_1(int) Select 61_14 43_2 43_1
           139_1:   21_1(int) SMod 169_9 169_10
           61_15:   21_1(int) Load 59_4(r)
           128_6:   21_1(int) IAdd 61_15 139_1
                              Store 59_4(r) 128_6
           61_16:  20_1(bool) Load 59_2(a)
          169_11:   21_1(int) Select 61_16 43_2 43_1
           61_17:  20_1(bool) Load 59_1(b)
          169_12:   21_1(int) Select 61_17 43_2 43_1
           199_1:   21_1(int) BitwiseAnd 169_11 169_12
           61_18:   21_1(int) Load 59_4(r)
           128_7:   21_1(int) IAdd 61_18 199_1
                              Store 59_4(r) 128_7
           61_19:  20_1(bool) Load 59_2(a)
          169_13:   21_1(int) Select 61_19 43_2 43_1
           61_20:  20_1(bool) Load 59_1(b)
          169_14:   21_1(int) Select 61_20 43_2 43_1
           197_1:   21_1(int) BitwiseOr 169_13 169_14
           61_21:   21_1(int) Load 59_4(r)
           128_8:   21_1(int) IAdd 61_21 197_1
                              Store 59_4(r) 128_8
           61_22:  20_1(bool) Load 59_2(a)
          169_15:   21_1(int) Select 61_22 43_2 43_1
           61_23:  20_1(bool) Load 59_1(b)
          169_16:   21_1(int) Select 61_23 43_2 43_1
           198_1:   21_1(int) BitwiseXor 169_15 169_16
           61_24:   21_1(int) Load 59_4(r)
           128_9:   21_1(int) IAdd 61_24 198_1
                              Store 59_4(r) 128_9
           61_25:  20_1(bool) Load 59_2(a)
          169_17:   21_1(int) Select 61_25 43_2 43_1
           61_26:  20_1(bool) Load 59_1(b)
          169_18:   21_1(int) Select 61_26 43_2 43_1
           196_1:   21_1(int) ShiftLeftLogical 169_17 169_18
           61_27:   21_1(int) Load 59_4(r)
          128_10:   21_1(int) IAdd 61_27 196_1
                              Store 59_4(r) 128_10
           61_28:  20_1(bool) Load 59_2(a)
          169_19:   21_1(int) Select 61_28 43_2 43_1
           61_29:  20_1(bool) Load 59_1(b)
          169_20:   21_1(int) Select 61_29 43_2 43_1
           195_1:   21_1(int) ShiftRightArithmetic 169_19 169_20
           61_30:   21_1(int) Load 59_4(r)
          128_11:   21_1(int) IAdd 61_30 195_1
                              Store 59_4(r) 128_11
           61_31:   21_1(int) Load 59_4(r)
           111_1: 22_1(float) ConvertSToF 61_31
            80_1: 23_1(fvec4) CompositeConstruct 111_1 111_1 111_1 111_1
                              ReturnValue 80_1
                              FunctionEnd
