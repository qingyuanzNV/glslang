hlsl.hull.1.tesc
Shader version: 500
vertices = 4
vertex spacing = equal_spacing
0:? Sequence
0:26  Function Definition: @main(struct-VS_OUT-vf31[4];u1; ( temp structure{ temp 3-component vector of float cpoint})
0:26    Function Parameters: 
0:26      'ip' ( in 4-element array of structure{ temp 3-component vector of float cpoint})
0:26      'm_cpid' ( in uint)
0:?     Sequence
0:28      move second child to first child ( temp 3-component vector of float)
0:28        cpoint: direct index for structure ( temp 3-component vector of float)
0:28          'output' ( temp structure{ temp 3-component vector of float cpoint})
0:28          Constant:
0:28            0 (const int)
0:28        cpoint: direct index for structure ( temp 3-component vector of float)
0:28          direct index ( temp structure{ temp 3-component vector of float cpoint})
0:28            'ip' ( in 4-element array of structure{ temp 3-component vector of float cpoint})
0:28            Constant:
0:28              0 (const int)
0:28          Constant:
0:28            0 (const int)
0:29      Branch: Return with expression
0:29        'output' ( temp structure{ temp 3-component vector of float cpoint})
0:26  Function Definition: main( ( temp void)
0:26    Function Parameters: 
0:?     Sequence
0:26      Sequence
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                0 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              0 (const int)
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                1 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              1 (const int)
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                2 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              2 (const int)
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                3 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              3 (const int)
0:26      move second child to first child ( temp uint)
0:?         'm_cpid' ( temp uint)
0:?         'm_cpid' ( in uint InvocationID)
0:26      Sequence
0:26        move second child to first child ( temp 3-component vector of float)
0:26          indirect index (layout( location=0) out 3-component vector of float)
0:?             '@entryPointOutput.cpoint' (layout( location=0) out 4-element array of 3-component vector of float)
0:?             'm_cpid' ( in uint InvocationID)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            Function Call: @main(struct-VS_OUT-vf31[4];u1; ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:?               'm_cpid' ( temp uint)
0:26            Constant:
0:26              0 (const int)
0:?       Barrier ( temp void)
0:?       Test condition and select ( temp void)
0:?         Condition
0:?         Compare Equal ( temp bool)
0:?           'm_cpid' ( in uint InvocationID)
0:?           Constant:
0:?             0 (const int)
0:?         true case
0:?         Sequence
0:?           move second child to first child ( temp structure{ temp 2-element array of float edges})
0:?             '@patchConstantResult' ( temp structure{ temp 2-element array of float edges})
0:?             Function Call: PCF(u1; ( temp structure{ temp 2-element array of float edges})
0:?               'pid' ( in uint PrimitiveID)
0:?           Sequence
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   0 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 2-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 2-element array of float edges})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   0 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   1 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 2-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 2-element array of float edges})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   1 (const int)
0:33  Function Definition: PCF(u1; ( temp structure{ temp 2-element array of float edges})
0:33    Function Parameters: 
0:33      'pid' ( in uint)
0:?     Sequence
0:36      move second child to first child ( temp float)
0:36        direct index ( temp float)
0:36          edges: direct index for structure ( temp 2-element array of float)
0:36            'output' ( temp structure{ temp 2-element array of float edges})
0:36            Constant:
0:36              0 (const int)
0:36          Constant:
0:36            0 (const int)
0:36        Constant:
0:36          2.000000
0:37      move second child to first child ( temp float)
0:37        direct index ( temp float)
0:37          edges: direct index for structure ( temp 2-element array of float)
0:37            'output' ( temp structure{ temp 2-element array of float edges})
0:37            Constant:
0:37              0 (const int)
0:37          Constant:
0:37            1 (const int)
0:37        Constant:
0:37          8.000000
0:38      Branch: Return with expression
0:38        'output' ( temp structure{ temp 2-element array of float edges})
0:?   Linker Objects
0:?     '@entryPointOutput.cpoint' (layout( location=0) out 4-element array of 3-component vector of float)
0:?     'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:?     'm_cpid' ( in uint InvocationID)
0:?     'pid' ( in uint PrimitiveID)
0:?     '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)


Linked tessellation control stage:


Shader version: 500
vertices = 4
vertex spacing = equal_spacing
0:? Sequence
0:26  Function Definition: @main(struct-VS_OUT-vf31[4];u1; ( temp structure{ temp 3-component vector of float cpoint})
0:26    Function Parameters: 
0:26      'ip' ( in 4-element array of structure{ temp 3-component vector of float cpoint})
0:26      'm_cpid' ( in uint)
0:?     Sequence
0:28      move second child to first child ( temp 3-component vector of float)
0:28        cpoint: direct index for structure ( temp 3-component vector of float)
0:28          'output' ( temp structure{ temp 3-component vector of float cpoint})
0:28          Constant:
0:28            0 (const int)
0:28        cpoint: direct index for structure ( temp 3-component vector of float)
0:28          direct index ( temp structure{ temp 3-component vector of float cpoint})
0:28            'ip' ( in 4-element array of structure{ temp 3-component vector of float cpoint})
0:28            Constant:
0:28              0 (const int)
0:28          Constant:
0:28            0 (const int)
0:29      Branch: Return with expression
0:29        'output' ( temp structure{ temp 3-component vector of float cpoint})
0:26  Function Definition: main( ( temp void)
0:26    Function Parameters: 
0:?     Sequence
0:26      Sequence
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                0 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              0 (const int)
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                1 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              1 (const int)
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                2 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              2 (const int)
0:26        move second child to first child ( temp 3-component vector of float)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            direct index ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:26              Constant:
0:26                3 (const int)
0:26            Constant:
0:26              0 (const int)
0:26          direct index (layout( location=0) in 3-component vector of float)
0:?             'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:26            Constant:
0:26              3 (const int)
0:26      move second child to first child ( temp uint)
0:?         'm_cpid' ( temp uint)
0:?         'm_cpid' ( in uint InvocationID)
0:26      Sequence
0:26        move second child to first child ( temp 3-component vector of float)
0:26          indirect index (layout( location=0) out 3-component vector of float)
0:?             '@entryPointOutput.cpoint' (layout( location=0) out 4-element array of 3-component vector of float)
0:?             'm_cpid' ( in uint InvocationID)
0:26          cpoint: direct index for structure ( temp 3-component vector of float)
0:26            Function Call: @main(struct-VS_OUT-vf31[4];u1; ( temp structure{ temp 3-component vector of float cpoint})
0:?               'ip' ( temp 4-element array of structure{ temp 3-component vector of float cpoint})
0:?               'm_cpid' ( temp uint)
0:26            Constant:
0:26              0 (const int)
0:?       Barrier ( temp void)
0:?       Test condition and select ( temp void)
0:?         Condition
0:?         Compare Equal ( temp bool)
0:?           'm_cpid' ( in uint InvocationID)
0:?           Constant:
0:?             0 (const int)
0:?         true case
0:?         Sequence
0:?           move second child to first child ( temp structure{ temp 2-element array of float edges})
0:?             '@patchConstantResult' ( temp structure{ temp 2-element array of float edges})
0:?             Function Call: PCF(u1; ( temp structure{ temp 2-element array of float edges})
0:?               'pid' ( in uint PrimitiveID)
0:?           Sequence
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   0 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 2-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 2-element array of float edges})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   0 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   1 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 2-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 2-element array of float edges})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   1 (const int)
0:33  Function Definition: PCF(u1; ( temp structure{ temp 2-element array of float edges})
0:33    Function Parameters: 
0:33      'pid' ( in uint)
0:?     Sequence
0:36      move second child to first child ( temp float)
0:36        direct index ( temp float)
0:36          edges: direct index for structure ( temp 2-element array of float)
0:36            'output' ( temp structure{ temp 2-element array of float edges})
0:36            Constant:
0:36              0 (const int)
0:36          Constant:
0:36            0 (const int)
0:36        Constant:
0:36          2.000000
0:37      move second child to first child ( temp float)
0:37        direct index ( temp float)
0:37          edges: direct index for structure ( temp 2-element array of float)
0:37            'output' ( temp structure{ temp 2-element array of float edges})
0:37            Constant:
0:37              0 (const int)
0:37          Constant:
0:37            1 (const int)
0:37        Constant:
0:37          8.000000
0:38      Branch: Return with expression
0:38        'output' ( temp structure{ temp 2-element array of float edges})
0:?   Linker Objects
0:?     '@entryPointOutput.cpoint' (layout( location=0) out 4-element array of 3-component vector of float)
0:?     'ip.cpoint' (layout( location=0) in 4-element array of 3-component vector of float)
0:?     'm_cpid' ( in uint InvocationID)
0:?     'pid' ( in uint PrimitiveID)
0:?     '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)

// Module Version 10000
// Generated by (magic number): 8000b
// Id's are bound by 104

                              Capability Tessellation
            11_1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint TessellationControl 54_1  "main" 59_1 59_2 59_3 59_4 59_5
                              ExecutionMode 54_1 OutputVertices 4
                              ExecutionMode 54_1 Isolines
                              ExecutionMode 54_1 SpacingEqual
                              Source HLSL 500
                              Name 54_1  "main"
                              Name 30_1  "VS_OUT"
                              MemberName 30_1(VS_OUT) 0  "cpoint"
                              Name 30_2  "HS_OUT"
                              MemberName 30_2(HS_OUT) 0  "cpoint"
                              Name 54_2  "@main(struct-VS_OUT-vf31[4];u1;"
                              Name 55_1  "ip"
                              Name 55_2  "m_cpid"
                              Name 30_3  "HS_CONSTANT_OUT"
                              MemberName 30_3(HS_CONSTANT_OUT) 0  "edges"
                              Name 54_3  "PCF(u1;"
                              Name 55_3  "pid"
                              Name 59_12  "output"
                              Name 59_6  "ip"
                              Name 59_1  "ip.cpoint"
                              Name 59_7  "m_cpid"
                              Name 59_2  "m_cpid"
                              Name 59_3  "@entryPointOutput.cpoint"
                              Name 59_8  "param"
                              Name 59_9  "param"
                              Name 59_10  "@patchConstantResult"
                              Name 59_4  "pid"
                              Name 59_11  "param"
                              Name 59_5  "@patchConstantOutput.edges"
                              Name 59_13  "output"
                              Decorate 59_1(ip.cpoint) Location 0
                              Decorate 59_2(m_cpid) BuiltIn InvocationId
                              Decorate 59_3(@entryPointOutput.cpoint) Location 0
                              Decorate 59_4(pid) BuiltIn PrimitiveId
                              Decorate 59_5(@patchConstantOutput.edges) BuiltIn TessLevelOuter
                              Decorate 59_5(@patchConstantOutput.edges) Patch
            19_1:             TypeVoid
            33_1:             TypeFunction 19_1
            22_1:             TypeFloat 32
            23_1:             TypeVector 22_1(float) 3
    30_1(VS_OUT):             TypeStruct 23_1(fvec3)
            21_1:             TypeInt 32 0
         uint(4):   21_1(int) Constant 4
            28_1:             TypeArray 30_1(VS_OUT) uint(4)
            32_1:             TypePointer Function 28_1
            32_2:             TypePointer Function 21_1(int)
    30_2(HS_OUT):             TypeStruct 23_1(fvec3)
            33_2:             TypeFunction 30_2(HS_OUT) 32_1(ptr) 32_2(ptr)
         uint(2):   21_1(int) Constant 2
            28_2:             TypeArray 22_1(float) uint(2)
30_3(HS_CONSTANT_OUT):             TypeStruct 28_2
            33_3:             TypeFunction 30_3(HS_CONSTANT_OUT) 32_2(ptr)
            32_3:             TypePointer Function 30_2(HS_OUT)
            21_2:             TypeInt 32 1
            43_1:   21_2(int) Constant 0
            32_4:             TypePointer Function 23_1(fvec3)
            28_3:             TypeArray 23_1(fvec3) uint(4)
            32_5:             TypePointer Input 28_3
 59_1(ip.cpoint):   32_5(ptr) Variable Input
            32_6:             TypePointer Input 23_1(fvec3)
            43_2:   21_2(int) Constant 1
            43_3:   21_2(int) Constant 2
            43_4:   21_2(int) Constant 3
            32_7:             TypePointer Input 21_1(int)
    59_2(m_cpid):   32_7(ptr) Variable Input
            32_8:             TypePointer Output 28_3
59_3(@entryPointOutput.cpoint):   32_8(ptr) Variable Output
            32_9:             TypePointer Output 23_1(fvec3)
         uint(0):   21_1(int) Constant 0
            20_1:             TypeBool
           32_10:             TypePointer Function 30_3(HS_CONSTANT_OUT)
       59_4(pid):   32_7(ptr) Variable Input
            28_4:             TypeArray 22_1(float) uint(4)
           32_11:             TypePointer Output 28_4
59_5(@patchConstantOutput.edges):  32_11(ptr) Variable Output
           32_12:             TypePointer Function 22_1(float)
           32_13:             TypePointer Output 22_1(float)
            43_5: 22_1(float) Constant 1073741824
            43_6: 22_1(float) Constant 1090519040
      54_1(main):        19_1 Function None 33_1
           248_1:             Label
        59_6(ip):   32_1(ptr) Variable Function
    59_7(m_cpid):   32_2(ptr) Variable Function
     59_8(param):   32_1(ptr) Variable Function
     59_9(param):   32_2(ptr) Variable Function
59_10(@patchConstantResult):  32_10(ptr) Variable Function
    59_11(param):   32_2(ptr) Variable Function
            65_1:   32_6(ptr) AccessChain 59_1(ip.cpoint) 43_1
            61_1: 23_1(fvec3) Load 65_1
            65_2:   32_4(ptr) AccessChain 59_6(ip) 43_1 43_1
                              Store 65_2 61_1
            65_3:   32_6(ptr) AccessChain 59_1(ip.cpoint) 43_2
            61_2: 23_1(fvec3) Load 65_3
            65_4:   32_4(ptr) AccessChain 59_6(ip) 43_2 43_1
                              Store 65_4 61_2
            65_5:   32_6(ptr) AccessChain 59_1(ip.cpoint) 43_3
            61_3: 23_1(fvec3) Load 65_5
            65_6:   32_4(ptr) AccessChain 59_6(ip) 43_3 43_1
                              Store 65_6 61_3
            65_7:   32_6(ptr) AccessChain 59_1(ip.cpoint) 43_4
            61_4: 23_1(fvec3) Load 65_7
            65_8:   32_4(ptr) AccessChain 59_6(ip) 43_4 43_1
                              Store 65_8 61_4
            61_5:   21_1(int) Load 59_2(m_cpid)
                              Store 59_7(m_cpid) 61_5
            61_6:   21_1(int) Load 59_2(m_cpid)
            61_7:        28_1 Load 59_6(ip)
                              Store 59_8(param) 61_7
            61_8:   21_1(int) Load 59_7(m_cpid)
                              Store 59_9(param) 61_8
            57_1:30_2(HS_OUT) FunctionCall 54_2(@main(struct-VS_OUT-vf31[4];u1;) 59_8(param) 59_9(param)
            81_1: 23_1(fvec3) CompositeExtract 57_1 0
            65_9:   32_9(ptr) AccessChain 59_3(@entryPointOutput.cpoint) 61_6
                              Store 65_9 81_1
                              ControlBarrier uint(2) uint(4) uint(0)
            61_9:   21_1(int) Load 59_2(m_cpid)
           170_1:  20_1(bool) IEqual 61_9 43_1
                              SelectionMerge 248_3 None
                              BranchConditional 170_1 248_2 248_3
           248_2:               Label
           61_10:   21_1(int)   Load 59_4(pid)
                                Store 59_11(param) 61_10
            57_2:30_3(HS_CONSTANT_OUT)   FunctionCall 54_3(PCF(u1;) 59_11(param)
                                Store 59_10(@patchConstantResult) 57_2
           65_10:  32_12(ptr)   AccessChain 59_10(@patchConstantResult) 43_1 43_1
           61_11: 22_1(float)   Load 65_10
           65_11:  32_13(ptr)   AccessChain 59_5(@patchConstantOutput.edges) 43_1
                                Store 65_11 61_11
           65_12:  32_12(ptr)   AccessChain 59_10(@patchConstantResult) 43_1 43_2
           61_12: 22_1(float)   Load 65_12
           65_13:  32_13(ptr)   AccessChain 59_5(@patchConstantOutput.edges) 43_2
                                Store 65_13 61_12
                                Branch 248_3
           248_3:             Label
                              Return
                              FunctionEnd
54_2(@main(struct-VS_OUT-vf31[4];u1;):30_2(HS_OUT) Function None 33_2
        55_1(ip):   32_1(ptr) FunctionParameter
    55_2(m_cpid):   32_2(ptr) FunctionParameter
           248_4:             Label
   59_12(output):   32_3(ptr) Variable Function
           65_14:   32_4(ptr) AccessChain 55_1(ip) 43_1 43_1
           61_13: 23_1(fvec3) Load 65_14
           65_15:   32_4(ptr) AccessChain 59_12(output) 43_1
                              Store 65_15 61_13
           61_14:30_2(HS_OUT) Load 59_12(output)
                              ReturnValue 61_14
                              FunctionEnd
   54_3(PCF(u1;):30_3(HS_CONSTANT_OUT) Function None 33_3
       55_3(pid):   32_2(ptr) FunctionParameter
           248_5:             Label
   59_13(output):  32_10(ptr) Variable Function
           65_16:  32_12(ptr) AccessChain 59_13(output) 43_1 43_1
                              Store 65_16 43_5
           65_17:  32_12(ptr) AccessChain 59_13(output) 43_1 43_2
                              Store 65_17 43_6
           61_15:30_3(HS_CONSTANT_OUT) Load 59_13(output)
                              ReturnValue 61_15
                              FunctionEnd
