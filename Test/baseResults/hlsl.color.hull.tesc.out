hlsl.color.hull.tesc
Shader version: 500
vertices = 3
vertex spacing = equal_spacing
triangle order = cw
0:? Sequence
0:37  Function Definition: ColorPatchConstantFunction(struct-HullInputType-vf3-vf41[3];u1; ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:37    Function Parameters: 
0:37      'inputPatch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:37      'patchId' ( in uint)
0:?     Sequence
0:42      move second child to first child ( temp float)
0:42        direct index ( temp float)
0:42          edges: direct index for structure ( temp 3-element array of float)
0:42            'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:42            Constant:
0:42              0 (const int)
0:42          Constant:
0:42            0 (const int)
0:42        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:42          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:42          Constant:
0:42            0 (const uint)
0:43      move second child to first child ( temp float)
0:43        direct index ( temp float)
0:43          edges: direct index for structure ( temp 3-element array of float)
0:43            'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:43            Constant:
0:43              0 (const int)
0:43          Constant:
0:43            1 (const int)
0:43        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:43          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:43          Constant:
0:43            0 (const uint)
0:44      move second child to first child ( temp float)
0:44        direct index ( temp float)
0:44          edges: direct index for structure ( temp 3-element array of float)
0:44            'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:44            Constant:
0:44              0 (const int)
0:44          Constant:
0:44            2 (const int)
0:44        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:44          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:44          Constant:
0:44            0 (const uint)
0:47      move second child to first child ( temp float)
0:47        inside: direct index for structure ( temp float)
0:47          'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:47          Constant:
0:47            1 (const int)
0:47        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:47          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:47          Constant:
0:47            0 (const uint)
0:49      Branch: Return with expression
0:49        'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:63  Function Definition: @main(struct-HullInputType-vf3-vf41[3];u1;u1; ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63    Function Parameters: 
0:63      'patch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63      'pointId' ( in uint)
0:63      'patchId' ( in uint)
0:?     Sequence
0:67      move second child to first child ( temp 3-component vector of float)
0:67        position: direct index for structure ( temp 3-component vector of float)
0:67          'output' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:67          Constant:
0:67            0 (const int)
0:67        position: direct index for structure ( temp 3-component vector of float)
0:67          indirect index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:67            'patch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:67            'pointId' ( in uint)
0:67          Constant:
0:67            0 (const int)
0:70      move second child to first child ( temp 4-component vector of float)
0:70        color: direct index for structure ( temp 4-component vector of float)
0:70          'output' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:70          Constant:
0:70            1 (const int)
0:70        color: direct index for structure ( temp 4-component vector of float)
0:70          indirect index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:70            'patch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:70            'pointId' ( in uint)
0:70          Constant:
0:70            1 (const int)
0:72      Branch: Return with expression
0:72        'output' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63  Function Definition: main( ( temp void)
0:63    Function Parameters: 
0:?     Sequence
0:63      Sequence
0:63        move second child to first child ( temp 3-component vector of float)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                0 (const int)
0:63            Constant:
0:63              0 (const int)
0:63          direct index (layout( location=0) in 3-component vector of float)
0:?             'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:63            Constant:
0:63              0 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                0 (const int)
0:63            Constant:
0:63              1 (const int)
0:63          direct index (layout( location=1) in 4-component vector of float)
0:?             'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:63            Constant:
0:63              0 (const int)
0:63        move second child to first child ( temp 3-component vector of float)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                1 (const int)
0:63            Constant:
0:63              0 (const int)
0:63          direct index (layout( location=0) in 3-component vector of float)
0:?             'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:63            Constant:
0:63              1 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                1 (const int)
0:63            Constant:
0:63              1 (const int)
0:63          direct index (layout( location=1) in 4-component vector of float)
0:?             'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:63            Constant:
0:63              1 (const int)
0:63        move second child to first child ( temp 3-component vector of float)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                2 (const int)
0:63            Constant:
0:63              0 (const int)
0:63          direct index (layout( location=0) in 3-component vector of float)
0:?             'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:63            Constant:
0:63              2 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                2 (const int)
0:63            Constant:
0:63              1 (const int)
0:63          direct index (layout( location=1) in 4-component vector of float)
0:?             'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:63            Constant:
0:63              2 (const int)
0:63      move second child to first child ( temp uint)
0:?         'pointId' ( temp uint)
0:?         'pointId' ( in uint InvocationID)
0:63      move second child to first child ( temp uint)
0:?         'patchId' ( temp uint)
0:?         'patchId' ( in uint PrimitiveID)
0:63      Sequence
0:63        move second child to first child ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63          'flattenTemp' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63          Function Call: @main(struct-HullInputType-vf3-vf41[3];u1;u1; ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?             'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?             'pointId' ( temp uint)
0:?             'patchId' ( temp uint)
0:63        move second child to first child ( temp 3-component vector of float)
0:63          indirect index (layout( location=0) out 3-component vector of float)
0:?             '@entryPointOutput.position' (layout( location=0) out 3-element array of 3-component vector of float)
0:?             'pointId' ( in uint InvocationID)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            'flattenTemp' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63            Constant:
0:63              0 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          indirect index (layout( location=1) out 4-component vector of float)
0:?             '@entryPointOutput.color' (layout( location=1) out 3-element array of 4-component vector of float)
0:?             'pointId' ( in uint InvocationID)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            'flattenTemp' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63            Constant:
0:63              1 (const int)
0:?       Barrier ( temp void)
0:?       Test condition and select ( temp void)
0:?         Condition
0:?         Compare Equal ( temp bool)
0:?           'pointId' ( in uint InvocationID)
0:?           Constant:
0:?             0 (const int)
0:?         true case
0:?         Sequence
0:?           move second child to first child ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?             '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?             Function Call: ColorPatchConstantFunction(struct-HullInputType-vf3-vf41[3];u1; ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patchId' ( in uint PrimitiveID)
0:?           Sequence
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   0 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 3-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   0 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   1 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 3-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   1 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   2 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 3-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   2 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelInner)
0:?                 '@patchConstantOutput.inside' ( patch out 2-element array of float TessLevelInner)
0:?                 Constant:
0:?                   0 (const int)
0:?               inside: direct index for structure ( temp float)
0:?                 '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                 Constant:
0:?                   1 (const int)
0:?   Linker Objects
0:?     'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:?     '@entryPointOutput.position' (layout( location=0) out 3-element array of 3-component vector of float)
0:?     '@entryPointOutput.color' (layout( location=1) out 3-element array of 4-component vector of float)
0:?     'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:?     'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:?     'pointId' ( in uint InvocationID)
0:?     'patchId' ( in uint PrimitiveID)
0:?     '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?     '@patchConstantOutput.inside' ( patch out 2-element array of float TessLevelInner)


Linked tessellation control stage:


Shader version: 500
vertices = 3
vertex spacing = equal_spacing
triangle order = cw
0:? Sequence
0:37  Function Definition: ColorPatchConstantFunction(struct-HullInputType-vf3-vf41[3];u1; ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:37    Function Parameters: 
0:37      'inputPatch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:37      'patchId' ( in uint)
0:?     Sequence
0:42      move second child to first child ( temp float)
0:42        direct index ( temp float)
0:42          edges: direct index for structure ( temp 3-element array of float)
0:42            'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:42            Constant:
0:42              0 (const int)
0:42          Constant:
0:42            0 (const int)
0:42        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:42          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:42          Constant:
0:42            0 (const uint)
0:43      move second child to first child ( temp float)
0:43        direct index ( temp float)
0:43          edges: direct index for structure ( temp 3-element array of float)
0:43            'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:43            Constant:
0:43              0 (const int)
0:43          Constant:
0:43            1 (const int)
0:43        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:43          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:43          Constant:
0:43            0 (const uint)
0:44      move second child to first child ( temp float)
0:44        direct index ( temp float)
0:44          edges: direct index for structure ( temp 3-element array of float)
0:44            'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:44            Constant:
0:44              0 (const int)
0:44          Constant:
0:44            2 (const int)
0:44        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:44          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:44          Constant:
0:44            0 (const uint)
0:47      move second child to first child ( temp float)
0:47        inside: direct index for structure ( temp float)
0:47          'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:47          Constant:
0:47            1 (const int)
0:47        tessellationAmount: direct index for structure (layout( row_major std140) uniform float)
0:47          'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:47          Constant:
0:47            0 (const uint)
0:49      Branch: Return with expression
0:49        'output' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:63  Function Definition: @main(struct-HullInputType-vf3-vf41[3];u1;u1; ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63    Function Parameters: 
0:63      'patch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63      'pointId' ( in uint)
0:63      'patchId' ( in uint)
0:?     Sequence
0:67      move second child to first child ( temp 3-component vector of float)
0:67        position: direct index for structure ( temp 3-component vector of float)
0:67          'output' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:67          Constant:
0:67            0 (const int)
0:67        position: direct index for structure ( temp 3-component vector of float)
0:67          indirect index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:67            'patch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:67            'pointId' ( in uint)
0:67          Constant:
0:67            0 (const int)
0:70      move second child to first child ( temp 4-component vector of float)
0:70        color: direct index for structure ( temp 4-component vector of float)
0:70          'output' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:70          Constant:
0:70            1 (const int)
0:70        color: direct index for structure ( temp 4-component vector of float)
0:70          indirect index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:70            'patch' ( in 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:70            'pointId' ( in uint)
0:70          Constant:
0:70            1 (const int)
0:72      Branch: Return with expression
0:72        'output' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63  Function Definition: main( ( temp void)
0:63    Function Parameters: 
0:?     Sequence
0:63      Sequence
0:63        move second child to first child ( temp 3-component vector of float)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                0 (const int)
0:63            Constant:
0:63              0 (const int)
0:63          direct index (layout( location=0) in 3-component vector of float)
0:?             'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:63            Constant:
0:63              0 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                0 (const int)
0:63            Constant:
0:63              1 (const int)
0:63          direct index (layout( location=1) in 4-component vector of float)
0:?             'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:63            Constant:
0:63              0 (const int)
0:63        move second child to first child ( temp 3-component vector of float)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                1 (const int)
0:63            Constant:
0:63              0 (const int)
0:63          direct index (layout( location=0) in 3-component vector of float)
0:?             'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:63            Constant:
0:63              1 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                1 (const int)
0:63            Constant:
0:63              1 (const int)
0:63          direct index (layout( location=1) in 4-component vector of float)
0:?             'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:63            Constant:
0:63              1 (const int)
0:63        move second child to first child ( temp 3-component vector of float)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                2 (const int)
0:63            Constant:
0:63              0 (const int)
0:63          direct index (layout( location=0) in 3-component vector of float)
0:?             'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:63            Constant:
0:63              2 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            direct index ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63              Constant:
0:63                2 (const int)
0:63            Constant:
0:63              1 (const int)
0:63          direct index (layout( location=1) in 4-component vector of float)
0:?             'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:63            Constant:
0:63              2 (const int)
0:63      move second child to first child ( temp uint)
0:?         'pointId' ( temp uint)
0:?         'pointId' ( in uint InvocationID)
0:63      move second child to first child ( temp uint)
0:?         'patchId' ( temp uint)
0:?         'patchId' ( in uint PrimitiveID)
0:63      Sequence
0:63        move second child to first child ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63          'flattenTemp' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63          Function Call: @main(struct-HullInputType-vf3-vf41[3];u1;u1; ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?             'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?             'pointId' ( temp uint)
0:?             'patchId' ( temp uint)
0:63        move second child to first child ( temp 3-component vector of float)
0:63          indirect index (layout( location=0) out 3-component vector of float)
0:?             '@entryPointOutput.position' (layout( location=0) out 3-element array of 3-component vector of float)
0:?             'pointId' ( in uint InvocationID)
0:63          position: direct index for structure ( temp 3-component vector of float)
0:63            'flattenTemp' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63            Constant:
0:63              0 (const int)
0:63        move second child to first child ( temp 4-component vector of float)
0:63          indirect index (layout( location=1) out 4-component vector of float)
0:?             '@entryPointOutput.color' (layout( location=1) out 3-element array of 4-component vector of float)
0:?             'pointId' ( in uint InvocationID)
0:63          color: direct index for structure ( temp 4-component vector of float)
0:63            'flattenTemp' ( temp structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:63            Constant:
0:63              1 (const int)
0:?       Barrier ( temp void)
0:?       Test condition and select ( temp void)
0:?         Condition
0:?         Compare Equal ( temp bool)
0:?           'pointId' ( in uint InvocationID)
0:?           Constant:
0:?             0 (const int)
0:?         true case
0:?         Sequence
0:?           move second child to first child ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?             '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?             Function Call: ColorPatchConstantFunction(struct-HullInputType-vf3-vf41[3];u1; ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?               'patch' ( temp 3-element array of structure{ temp 3-component vector of float position,  temp 4-component vector of float color})
0:?               'patchId' ( in uint PrimitiveID)
0:?           Sequence
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   0 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 3-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   0 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   1 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 3-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   1 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelOuter)
0:?                 '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?                 Constant:
0:?                   2 (const int)
0:?               direct index ( temp float)
0:?                 edges: direct index for structure ( temp 3-element array of float)
0:?                   '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                   Constant:
0:?                     0 (const int)
0:?                 Constant:
0:?                   2 (const int)
0:?             move second child to first child ( temp float)
0:?               direct index ( patch out float TessLevelInner)
0:?                 '@patchConstantOutput.inside' ( patch out 2-element array of float TessLevelInner)
0:?                 Constant:
0:?                   0 (const int)
0:?               inside: direct index for structure ( temp float)
0:?                 '@patchConstantResult' ( temp structure{ temp 3-element array of float edges,  temp float inside})
0:?                 Constant:
0:?                   1 (const int)
0:?   Linker Objects
0:?     'anon@0' (layout( binding=0 row_major std140) uniform block{layout( row_major std140) uniform float tessellationAmount, layout( row_major std140) uniform 3-component vector of float padding})
0:?     '@entryPointOutput.position' (layout( location=0) out 3-element array of 3-component vector of float)
0:?     '@entryPointOutput.color' (layout( location=1) out 3-element array of 4-component vector of float)
0:?     'patch.position' (layout( location=0) in 3-element array of 3-component vector of float)
0:?     'patch.color' (layout( location=1) in 3-element array of 4-component vector of float)
0:?     'pointId' ( in uint InvocationID)
0:?     'patchId' ( in uint PrimitiveID)
0:?     '@patchConstantOutput.edges' ( patch out 4-element array of float TessLevelOuter)
0:?     '@patchConstantOutput.inside' ( patch out 2-element array of float TessLevelInner)

// Module Version 10000
// Generated by (magic number): 8000b
// Id's are bound by 159

                              Capability Tessellation
            11_1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint TessellationControl 54_1  "main" 59_2 59_3 59_4 59_5 59_6 59_7 59_8 59_9
                              ExecutionMode 54_1 OutputVertices 3
                              ExecutionMode 54_1 Triangles
                              ExecutionMode 54_1 SpacingEqual
                              ExecutionMode 54_1 VertexOrderCw
                              Source HLSL 500
                              Name 54_1  "main"
                              Name 30_1  "HullInputType"
                              MemberName 30_1(HullInputType) 0  "position"
                              MemberName 30_1(HullInputType) 1  "color"
                              Name 30_2  "ConstantOutputType"
                              MemberName 30_2(ConstantOutputType) 0  "edges"
                              MemberName 30_2(ConstantOutputType) 1  "inside"
                              Name 54_2  "ColorPatchConstantFunction(struct-HullInputType-vf3-vf41[3];u1;"
                              Name 55_1  "inputPatch"
                              Name 55_2  "patchId"
                              Name 30_3  "HullOutputType"
                              MemberName 30_3(HullOutputType) 0  "position"
                              MemberName 30_3(HullOutputType) 1  "color"
                              Name 54_3  "@main(struct-HullInputType-vf3-vf41[3];u1;u1;"
                              Name 55_3  "patch"
                              Name 55_4  "pointId"
                              Name 55_5  "patchId"
                              Name 59_20  "output"
                              Name 30_4  "TessellationBuffer"
                              MemberName 30_4(TessellationBuffer) 0  "tessellationAmount"
                              MemberName 30_4(TessellationBuffer) 1  "padding"
                              Name 59_1  ""
                              Name 59_21  "output"
                              Name 59_10  "patch"
                              Name 59_2  "patch.position"
                              Name 59_3  "patch.color"
                              Name 59_11  "pointId"
                              Name 59_4  "pointId"
                              Name 59_12  "patchId"
                              Name 59_5  "patchId"
                              Name 59_13  "flattenTemp"
                              Name 59_14  "param"
                              Name 59_15  "param"
                              Name 59_16  "param"
                              Name 59_6  "@entryPointOutput.position"
                              Name 59_7  "@entryPointOutput.color"
                              Name 59_17  "@patchConstantResult"
                              Name 59_18  "param"
                              Name 59_19  "param"
                              Name 59_8  "@patchConstantOutput.edges"
                              Name 59_9  "@patchConstantOutput.inside"
                              Decorate 30_4(TessellationBuffer) Block
                              MemberDecorate 30_4(TessellationBuffer) 0 Offset 0
                              MemberDecorate 30_4(TessellationBuffer) 1 Offset 4
                              Decorate 59_1 Binding 0
                              Decorate 59_1 DescriptorSet 0
                              Decorate 59_2(patch.position) Location 0
                              Decorate 59_3(patch.color) Location 1
                              Decorate 59_4(pointId) BuiltIn InvocationId
                              Decorate 59_5(patchId) BuiltIn PrimitiveId
                              Decorate 59_6(@entryPointOutput.position) Location 0
                              Decorate 59_7(@entryPointOutput.color) Location 1
                              Decorate 59_8(@patchConstantOutput.edges) BuiltIn TessLevelOuter
                              Decorate 59_8(@patchConstantOutput.edges) Patch
                              Decorate 59_9(@patchConstantOutput.inside) BuiltIn TessLevelInner
                              Decorate 59_9(@patchConstantOutput.inside) Patch
            19_1:             TypeVoid
            33_1:             TypeFunction 19_1
            22_1:             TypeFloat 32
            23_1:             TypeVector 22_1(float) 3
            23_2:             TypeVector 22_1(float) 4
30_1(HullInputType):             TypeStruct 23_1(fvec3) 23_2(fvec4)
            21_1:             TypeInt 32 0
         uint(3):   21_1(int) Constant 3
            28_1:             TypeArray 30_1(HullInputType) uint(3)
            32_1:             TypePointer Function 28_1
            32_2:             TypePointer Function 21_1(int)
            28_2:             TypeArray 22_1(float) uint(3)
30_2(ConstantOutputType):             TypeStruct 28_2 22_1(float)
            33_2:             TypeFunction 30_2(ConstantOutputType) 32_1(ptr) 32_2(ptr)
30_3(HullOutputType):             TypeStruct 23_1(fvec3) 23_2(fvec4)
            33_3:             TypeFunction 30_3(HullOutputType) 32_1(ptr) 32_2(ptr) 32_2(ptr)
            32_3:             TypePointer Function 30_2(ConstantOutputType)
            21_2:             TypeInt 32 1
            43_1:   21_2(int) Constant 0
30_4(TessellationBuffer):             TypeStruct 22_1(float) 23_1(fvec3)
            32_4:             TypePointer Uniform 30_4(TessellationBuffer)
            59_1:   32_4(ptr) Variable Uniform
            32_5:             TypePointer Uniform 22_1(float)
            32_6:             TypePointer Function 22_1(float)
            43_2:   21_2(int) Constant 1
            43_3:   21_2(int) Constant 2
            32_7:             TypePointer Function 30_3(HullOutputType)
            32_8:             TypePointer Function 23_1(fvec3)
            32_9:             TypePointer Function 23_2(fvec4)
            28_3:             TypeArray 23_1(fvec3) uint(3)
           32_10:             TypePointer Input 28_3
59_2(patch.position):  32_10(ptr) Variable Input
           32_11:             TypePointer Input 23_1(fvec3)
            28_4:             TypeArray 23_2(fvec4) uint(3)
           32_12:             TypePointer Input 28_4
59_3(patch.color):  32_12(ptr) Variable Input
           32_13:             TypePointer Input 23_2(fvec4)
           32_14:             TypePointer Input 21_1(int)
   59_4(pointId):  32_14(ptr) Variable Input
   59_5(patchId):  32_14(ptr) Variable Input
           32_15:             TypePointer Output 28_3
59_6(@entryPointOutput.position):  32_15(ptr) Variable Output
           32_16:             TypePointer Output 23_1(fvec3)
           32_17:             TypePointer Output 28_4
59_7(@entryPointOutput.color):  32_17(ptr) Variable Output
           32_18:             TypePointer Output 23_2(fvec4)
         uint(2):   21_1(int) Constant 2
         uint(4):   21_1(int) Constant 4
         uint(0):   21_1(int) Constant 0
            20_1:             TypeBool
            28_5:             TypeArray 22_1(float) uint(4)
           32_19:             TypePointer Output 28_5
59_8(@patchConstantOutput.edges):  32_19(ptr) Variable Output
           32_20:             TypePointer Output 22_1(float)
            28_6:             TypeArray 22_1(float) uint(2)
           32_21:             TypePointer Output 28_6
59_9(@patchConstantOutput.inside):  32_21(ptr) Variable Output
      54_1(main):        19_1 Function None 33_1
           248_1:             Label
    59_10(patch):   32_1(ptr) Variable Function
  59_11(pointId):   32_2(ptr) Variable Function
  59_12(patchId):   32_2(ptr) Variable Function
59_13(flattenTemp):   32_7(ptr) Variable Function
    59_14(param):   32_1(ptr) Variable Function
    59_15(param):   32_2(ptr) Variable Function
    59_16(param):   32_2(ptr) Variable Function
59_17(@patchConstantResult):   32_3(ptr) Variable Function
    59_18(param):   32_1(ptr) Variable Function
    59_19(param):   32_2(ptr) Variable Function
            65_1:  32_11(ptr) AccessChain 59_2(patch.position) 43_1
            61_1: 23_1(fvec3) Load 65_1
            65_2:   32_8(ptr) AccessChain 59_10(patch) 43_1 43_1
                              Store 65_2 61_1
            65_3:  32_13(ptr) AccessChain 59_3(patch.color) 43_1
            61_2: 23_2(fvec4) Load 65_3
            65_4:   32_9(ptr) AccessChain 59_10(patch) 43_1 43_2
                              Store 65_4 61_2
            65_5:  32_11(ptr) AccessChain 59_2(patch.position) 43_2
            61_3: 23_1(fvec3) Load 65_5
            65_6:   32_8(ptr) AccessChain 59_10(patch) 43_2 43_1
                              Store 65_6 61_3
            65_7:  32_13(ptr) AccessChain 59_3(patch.color) 43_2
            61_4: 23_2(fvec4) Load 65_7
            65_8:   32_9(ptr) AccessChain 59_10(patch) 43_2 43_2
                              Store 65_8 61_4
            65_9:  32_11(ptr) AccessChain 59_2(patch.position) 43_3
            61_5: 23_1(fvec3) Load 65_9
           65_10:   32_8(ptr) AccessChain 59_10(patch) 43_3 43_1
                              Store 65_10 61_5
           65_11:  32_13(ptr) AccessChain 59_3(patch.color) 43_3
            61_6: 23_2(fvec4) Load 65_11
           65_12:   32_9(ptr) AccessChain 59_10(patch) 43_3 43_2
                              Store 65_12 61_6
            61_7:   21_1(int) Load 59_4(pointId)
                              Store 59_11(pointId) 61_7
            61_8:   21_1(int) Load 59_5(patchId)
                              Store 59_12(patchId) 61_8
            61_9:        28_1 Load 59_10(patch)
                              Store 59_14(param) 61_9
           61_10:   21_1(int) Load 59_11(pointId)
                              Store 59_15(param) 61_10
           61_11:   21_1(int) Load 59_12(patchId)
                              Store 59_16(param) 61_11
            57_1:30_3(HullOutputType) FunctionCall 54_3(@main(struct-HullInputType-vf3-vf41[3];u1;u1;) 59_14(param) 59_15(param) 59_16(param)
                              Store 59_13(flattenTemp) 57_1
           61_12:   21_1(int) Load 59_4(pointId)
           65_13:   32_8(ptr) AccessChain 59_13(flattenTemp) 43_1
           61_13: 23_1(fvec3) Load 65_13
           65_14:  32_16(ptr) AccessChain 59_6(@entryPointOutput.position) 61_12
                              Store 65_14 61_13
           61_14:   21_1(int) Load 59_4(pointId)
           65_15:   32_9(ptr) AccessChain 59_13(flattenTemp) 43_2
           61_15: 23_2(fvec4) Load 65_15
           65_16:  32_18(ptr) AccessChain 59_7(@entryPointOutput.color) 61_14
                              Store 65_16 61_15
                              ControlBarrier uint(2) uint(4) uint(0)
           61_16:   21_1(int) Load 59_4(pointId)
           170_1:  20_1(bool) IEqual 61_16 43_1
                              SelectionMerge 248_3 None
                              BranchConditional 170_1 248_2 248_3
           248_2:               Label
           61_17:        28_1   Load 59_10(patch)
                                Store 59_18(param) 61_17
           61_18:   21_1(int)   Load 59_5(patchId)
                                Store 59_19(param) 61_18
            57_2:30_2(ConstantOutputType)   FunctionCall 54_2(ColorPatchConstantFunction(struct-HullInputType-vf3-vf41[3];u1;) 59_18(param) 59_19(param)
                                Store 59_17(@patchConstantResult) 57_2
           65_17:   32_6(ptr)   AccessChain 59_17(@patchConstantResult) 43_1 43_1
           61_19: 22_1(float)   Load 65_17
           65_18:  32_20(ptr)   AccessChain 59_8(@patchConstantOutput.edges) 43_1
                                Store 65_18 61_19
           65_19:   32_6(ptr)   AccessChain 59_17(@patchConstantResult) 43_1 43_2
           61_20: 22_1(float)   Load 65_19
           65_20:  32_20(ptr)   AccessChain 59_8(@patchConstantOutput.edges) 43_2
                                Store 65_20 61_20
           65_21:   32_6(ptr)   AccessChain 59_17(@patchConstantResult) 43_1 43_3
           61_21: 22_1(float)   Load 65_21
           65_22:  32_20(ptr)   AccessChain 59_8(@patchConstantOutput.edges) 43_3
                                Store 65_22 61_21
           65_23:   32_6(ptr)   AccessChain 59_17(@patchConstantResult) 43_2
           61_22: 22_1(float)   Load 65_23
           65_24:  32_20(ptr)   AccessChain 59_9(@patchConstantOutput.inside) 43_1
                                Store 65_24 61_22
                                Branch 248_3
           248_3:             Label
                              Return
                              FunctionEnd
54_2(ColorPatchConstantFunction(struct-HullInputType-vf3-vf41[3];u1;):30_2(ConstantOutputType) Function None 33_2
55_1(inputPatch):   32_1(ptr) FunctionParameter
   55_2(patchId):   32_2(ptr) FunctionParameter
           248_4:             Label
   59_20(output):   32_3(ptr) Variable Function
           65_25:   32_5(ptr) AccessChain 59_1 43_1
           61_23: 22_1(float) Load 65_25
           65_26:   32_6(ptr) AccessChain 59_20(output) 43_1 43_1
                              Store 65_26 61_23
           65_27:   32_5(ptr) AccessChain 59_1 43_1
           61_24: 22_1(float) Load 65_27
           65_28:   32_6(ptr) AccessChain 59_20(output) 43_1 43_2
                              Store 65_28 61_24
           65_29:   32_5(ptr) AccessChain 59_1 43_1
           61_25: 22_1(float) Load 65_29
           65_30:   32_6(ptr) AccessChain 59_20(output) 43_1 43_3
                              Store 65_30 61_25
           65_31:   32_5(ptr) AccessChain 59_1 43_1
           61_26: 22_1(float) Load 65_31
           65_32:   32_6(ptr) AccessChain 59_20(output) 43_2
                              Store 65_32 61_26
           61_27:30_2(ConstantOutputType) Load 59_20(output)
                              ReturnValue 61_27
                              FunctionEnd
54_3(@main(struct-HullInputType-vf3-vf41[3];u1;u1;):30_3(HullOutputType) Function None 33_3
     55_3(patch):   32_1(ptr) FunctionParameter
   55_4(pointId):   32_2(ptr) FunctionParameter
   55_5(patchId):   32_2(ptr) FunctionParameter
           248_5:             Label
   59_21(output):   32_7(ptr) Variable Function
           61_28:   21_1(int) Load 55_4(pointId)
           65_33:   32_8(ptr) AccessChain 55_3(patch) 61_28 43_1
           61_29: 23_1(fvec3) Load 65_33
           65_34:   32_8(ptr) AccessChain 59_21(output) 43_1
                              Store 65_34 61_29
           61_30:   21_1(int) Load 55_4(pointId)
           65_35:   32_9(ptr) AccessChain 55_3(patch) 61_30 43_2
           61_31: 23_2(fvec4) Load 65_35
           65_36:   32_9(ptr) AccessChain 59_21(output) 43_2
                              Store 65_36 61_31
           61_32:30_3(HullOutputType) Load 59_21(output)
                              ReturnValue 61_32
                              FunctionEnd
