hlsl.implicitBool.frag
Shader version: 500
gl_FragCoord origin is upper left
0:? Sequence
0:7  Function Definition: @main( ( temp 4-component vector of float)
0:7    Function Parameters: 
0:?     Sequence
0:8      Sequence
0:8        move second child to first child ( temp 4-component vector of float)
0:8          'a' ( temp 4-component vector of float)
0:8          Constant:
0:8            2.000000
0:8            2.000000
0:8            2.000000
0:8            2.000000
0:9      Test condition and select ( temp void)
0:9        Condition
0:9        Convert int to bool ( temp bool)
0:9          condi: direct index for structure ( uniform int)
0:9            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:9            Constant:
0:9              1 (const uint)
0:9        true case
0:10        Branch: Return with expression
0:10          add ( temp 4-component vector of float)
0:10            'a' ( temp 4-component vector of float)
0:10            Constant:
0:10              1.000000
0:11      Test condition and select ( temp void)
0:11        Condition
0:11        Convert float to bool ( temp bool)
0:11          condf: direct index for structure ( uniform float)
0:11            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:11            Constant:
0:11              0 (const uint)
0:11        true case
0:12        Branch: Return with expression
0:12          add ( temp 4-component vector of float)
0:12            'a' ( temp 4-component vector of float)
0:12            Constant:
0:12              2.000000
0:13      Test condition and select ( temp void)
0:13        Condition
0:13        Convert float to bool ( temp bool)
0:13          condf1: direct index for structure ( uniform 1-component vector of float)
0:13            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:13            Constant:
0:13              2 (const uint)
0:13        true case
0:14        Branch: Return with expression
0:14          add ( temp 4-component vector of float)
0:14            'a' ( temp 4-component vector of float)
0:14            Constant:
0:14              3.000000
0:15      Test condition and select ( temp void)
0:15        Condition
0:15        Convert int to bool ( temp bool)
0:15          condi1: direct index for structure ( uniform 1-component vector of int)
0:15            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:15            Constant:
0:15              3 (const uint)
0:15        true case
0:16        Branch: Return with expression
0:16          add ( temp 4-component vector of float)
0:16            'a' ( temp 4-component vector of float)
0:16            Constant:
0:16              4.000000
0:17      Test condition and select ( temp void)
0:17        Condition
0:17        logical-or ( temp bool)
0:17          logical-and ( temp bool)
0:17            Convert int to bool ( temp bool)
0:17              condi: direct index for structure ( uniform int)
0:17                'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:17                Constant:
0:17                  1 (const uint)
0:17            Convert float to bool ( temp bool)
0:17              condf: direct index for structure ( uniform float)
0:17                'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:17                Constant:
0:17                  0 (const uint)
0:17          Convert float to bool ( temp bool)
0:17            condf1: direct index for structure ( uniform 1-component vector of float)
0:17              'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:17              Constant:
0:17                2 (const uint)
0:17        true case
0:18        Branch: Return with expression
0:18          add ( temp 4-component vector of float)
0:18            'a' ( temp 4-component vector of float)
0:18            Constant:
0:18              5.000000
0:20      Sequence
0:20        move second child to first child ( temp float)
0:20          'f' ( temp float)
0:20          condf: direct index for structure ( uniform float)
0:20            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:20            Constant:
0:20              0 (const uint)
0:21      Loop with condition tested first
0:21        Loop Condition
0:21        Convert float to bool ( temp bool)
0:21          'f' ( temp float)
0:21        Loop Body
0:?         Sequence
0:21          Pre-Decrement ( temp float)
0:21            'f' ( temp float)
0:23      Sequence
0:23        move second child to first child ( temp int)
0:23          'i' ( temp int)
0:23          condi: direct index for structure ( uniform int)
0:23            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:23            Constant:
0:23              1 (const uint)
0:24      Loop with condition not tested first
0:24        Loop Condition
0:24        Convert int to bool ( temp bool)
0:24          'i' ( temp int)
0:24        Loop Body
0:?         Sequence
0:24          Pre-Decrement ( temp int)
0:24            'i' ( temp int)
0:?       Sequence
0:26        Loop with condition tested first
0:26          Loop Condition
0:26          Convert int to bool ( temp bool)
0:26            'i' ( temp int)
0:26          Loop Body
0:?           Sequence
0:26            Pre-Decrement ( temp int)
0:26              'i' ( temp int)
0:28      Sequence
0:28        move second child to first child ( temp float)
0:28          'g' ( temp float)
0:28          Test condition and select ( temp float): no shortcircuit
0:28            Condition
0:28            Convert float to bool ( temp bool)
0:28              condf: direct index for structure ( uniform float)
0:28                'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:28                Constant:
0:28                  0 (const uint)
0:28            true case
0:28            Constant:
0:28              7.000000
0:28            false case
0:28            Constant:
0:28              8.000000
0:29      add second child into first child ( temp 4-component vector of float)
0:29        'a' ( temp 4-component vector of float)
0:29        'g' ( temp float)
0:31      Branch: Return with expression
0:31        subtract ( temp 4-component vector of float)
0:31          'a' ( temp 4-component vector of float)
0:31          Constant:
0:31            1.000000
0:7  Function Definition: main( ( temp void)
0:7    Function Parameters: 
0:?     Sequence
0:7      move second child to first child ( temp 4-component vector of float)
0:?         '@entryPointOutput' (layout( location=0) out 4-component vector of float)
0:7        Function Call: @main( ( temp 4-component vector of float)
0:?   Linker Objects
0:?     'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:?     '@entryPointOutput' (layout( location=0) out 4-component vector of float)


Linked fragment stage:


Shader version: 500
gl_FragCoord origin is upper left
0:? Sequence
0:7  Function Definition: @main( ( temp 4-component vector of float)
0:7    Function Parameters: 
0:?     Sequence
0:8      Sequence
0:8        move second child to first child ( temp 4-component vector of float)
0:8          'a' ( temp 4-component vector of float)
0:8          Constant:
0:8            2.000000
0:8            2.000000
0:8            2.000000
0:8            2.000000
0:9      Test condition and select ( temp void)
0:9        Condition
0:9        Convert int to bool ( temp bool)
0:9          condi: direct index for structure ( uniform int)
0:9            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:9            Constant:
0:9              1 (const uint)
0:9        true case
0:10        Branch: Return with expression
0:10          add ( temp 4-component vector of float)
0:10            'a' ( temp 4-component vector of float)
0:10            Constant:
0:10              1.000000
0:11      Test condition and select ( temp void)
0:11        Condition
0:11        Convert float to bool ( temp bool)
0:11          condf: direct index for structure ( uniform float)
0:11            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:11            Constant:
0:11              0 (const uint)
0:11        true case
0:12        Branch: Return with expression
0:12          add ( temp 4-component vector of float)
0:12            'a' ( temp 4-component vector of float)
0:12            Constant:
0:12              2.000000
0:13      Test condition and select ( temp void)
0:13        Condition
0:13        Convert float to bool ( temp bool)
0:13          condf1: direct index for structure ( uniform 1-component vector of float)
0:13            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:13            Constant:
0:13              2 (const uint)
0:13        true case
0:14        Branch: Return with expression
0:14          add ( temp 4-component vector of float)
0:14            'a' ( temp 4-component vector of float)
0:14            Constant:
0:14              3.000000
0:15      Test condition and select ( temp void)
0:15        Condition
0:15        Convert int to bool ( temp bool)
0:15          condi1: direct index for structure ( uniform 1-component vector of int)
0:15            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:15            Constant:
0:15              3 (const uint)
0:15        true case
0:16        Branch: Return with expression
0:16          add ( temp 4-component vector of float)
0:16            'a' ( temp 4-component vector of float)
0:16            Constant:
0:16              4.000000
0:17      Test condition and select ( temp void)
0:17        Condition
0:17        logical-or ( temp bool)
0:17          logical-and ( temp bool)
0:17            Convert int to bool ( temp bool)
0:17              condi: direct index for structure ( uniform int)
0:17                'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:17                Constant:
0:17                  1 (const uint)
0:17            Convert float to bool ( temp bool)
0:17              condf: direct index for structure ( uniform float)
0:17                'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:17                Constant:
0:17                  0 (const uint)
0:17          Convert float to bool ( temp bool)
0:17            condf1: direct index for structure ( uniform 1-component vector of float)
0:17              'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:17              Constant:
0:17                2 (const uint)
0:17        true case
0:18        Branch: Return with expression
0:18          add ( temp 4-component vector of float)
0:18            'a' ( temp 4-component vector of float)
0:18            Constant:
0:18              5.000000
0:20      Sequence
0:20        move second child to first child ( temp float)
0:20          'f' ( temp float)
0:20          condf: direct index for structure ( uniform float)
0:20            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:20            Constant:
0:20              0 (const uint)
0:21      Loop with condition tested first
0:21        Loop Condition
0:21        Convert float to bool ( temp bool)
0:21          'f' ( temp float)
0:21        Loop Body
0:?         Sequence
0:21          Pre-Decrement ( temp float)
0:21            'f' ( temp float)
0:23      Sequence
0:23        move second child to first child ( temp int)
0:23          'i' ( temp int)
0:23          condi: direct index for structure ( uniform int)
0:23            'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:23            Constant:
0:23              1 (const uint)
0:24      Loop with condition not tested first
0:24        Loop Condition
0:24        Convert int to bool ( temp bool)
0:24          'i' ( temp int)
0:24        Loop Body
0:?         Sequence
0:24          Pre-Decrement ( temp int)
0:24            'i' ( temp int)
0:?       Sequence
0:26        Loop with condition tested first
0:26          Loop Condition
0:26          Convert int to bool ( temp bool)
0:26            'i' ( temp int)
0:26          Loop Body
0:?           Sequence
0:26            Pre-Decrement ( temp int)
0:26              'i' ( temp int)
0:28      Sequence
0:28        move second child to first child ( temp float)
0:28          'g' ( temp float)
0:28          Test condition and select ( temp float): no shortcircuit
0:28            Condition
0:28            Convert float to bool ( temp bool)
0:28              condf: direct index for structure ( uniform float)
0:28                'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:28                Constant:
0:28                  0 (const uint)
0:28            true case
0:28            Constant:
0:28              7.000000
0:28            false case
0:28            Constant:
0:28              8.000000
0:29      add second child into first child ( temp 4-component vector of float)
0:29        'a' ( temp 4-component vector of float)
0:29        'g' ( temp float)
0:31      Branch: Return with expression
0:31        subtract ( temp 4-component vector of float)
0:31          'a' ( temp 4-component vector of float)
0:31          Constant:
0:31            1.000000
0:7  Function Definition: main( ( temp void)
0:7    Function Parameters: 
0:?     Sequence
0:7      move second child to first child ( temp 4-component vector of float)
0:?         '@entryPointOutput' (layout( location=0) out 4-component vector of float)
0:7        Function Call: @main( ( temp 4-component vector of float)
0:?   Linker Objects
0:?     'anon@0' (layout( row_major std140) uniform block{ uniform float condf,  uniform int condi,  uniform 1-component vector of float condf1,  uniform 1-component vector of int condi1})
0:?     '@entryPointOutput' (layout( location=0) out 4-component vector of float)

// Module Version 10000
// Generated by (magic number): 8000b
// Id's are bound by 139

                              Capability Shader
            11_1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 54_1  "main" 59_2
                              ExecutionMode 54_1 OriginUpperLeft
                              Source HLSL 500
                              Name 54_1  "main"
                              Name 54_2  "@main("
                              Name 59_3  "a"
                              Name 30_1  "$Global"
                              MemberName 30_1($Global) 0  "condf"
                              MemberName 30_1($Global) 1  "condi"
                              MemberName 30_1($Global) 2  "condf1"
                              MemberName 30_1($Global) 3  "condi1"
                              Name 59_1  ""
                              Name 59_4  "f"
                              Name 59_5  "i"
                              Name 59_6  "g"
                              Name 59_2  "@entryPointOutput"
                              Decorate 30_1($Global) Block
                              MemberDecorate 30_1($Global) 0 Offset 0
                              MemberDecorate 30_1($Global) 1 Offset 4
                              MemberDecorate 30_1($Global) 2 Offset 8
                              MemberDecorate 30_1($Global) 3 Offset 12
                              Decorate 59_1 Binding 0
                              Decorate 59_1 DescriptorSet 0
                              Decorate 59_2(@entryPointOutput) Location 0
            19_1:             TypeVoid
            33_1:             TypeFunction 19_1
            22_1:             TypeFloat 32
            23_1:             TypeVector 22_1(float) 4
            33_2:             TypeFunction 23_1(fvec4)
            32_1:             TypePointer Function 23_1(fvec4)
            43_1: 22_1(float) Constant 1073741824
            44_1: 23_1(fvec4) ConstantComposite 43_1 43_1 43_1 43_1
            21_1:             TypeInt 32 1
   30_1($Global):             TypeStruct 22_1(float) 21_1(int) 22_1(float) 21_1(int)
            32_2:             TypePointer Uniform 30_1($Global)
            59_1:   32_2(ptr) Variable Uniform
            43_2:   21_1(int) Constant 1
            32_3:             TypePointer Uniform 21_1(int)
            20_1:             TypeBool
            21_2:             TypeInt 32 0
         uint(0):   21_2(int) Constant 0
            43_3: 22_1(float) Constant 1065353216
            43_4:   21_1(int) Constant 0
            32_4:             TypePointer Uniform 22_1(float)
            43_5: 22_1(float) Constant 0
            43_6:   21_1(int) Constant 2
            43_7: 22_1(float) Constant 1077936128
            43_8:   21_1(int) Constant 3
            43_9: 22_1(float) Constant 1082130432
           43_10: 22_1(float) Constant 1084227584
            32_5:             TypePointer Function 22_1(float)
            32_6:             TypePointer Function 21_1(int)
           43_11: 22_1(float) Constant 1088421888
           43_12: 22_1(float) Constant 1090519040
            32_7:             TypePointer Output 23_1(fvec4)
59_2(@entryPointOutput):   32_7(ptr) Variable Output
      54_1(main):        19_1 Function None 33_1
           248_1:             Label
            57_1: 23_1(fvec4) FunctionCall 54_2(@main()
                              Store 59_2(@entryPointOutput) 57_1
                              Return
                              FunctionEnd
    54_2(@main(): 23_1(fvec4) Function None 33_2
           248_2:             Label
         59_3(a):   32_1(ptr) Variable Function
         59_4(f):   32_5(ptr) Variable Function
         59_5(i):   32_6(ptr) Variable Function
         59_6(g):   32_5(ptr) Variable Function
                              Store 59_3(a) 44_1
            65_1:   32_3(ptr) AccessChain 59_1 43_2
            61_1:   21_1(int) Load 65_1
           171_1:  20_1(bool) INotEqual 61_1 uint(0)
                              SelectionMerge 248_4 None
                              BranchConditional 171_1 248_3 248_4
           248_3:               Label
            61_2: 23_1(fvec4)   Load 59_3(a)
            80_1: 23_1(fvec4)   CompositeConstruct 43_3 43_3 43_3 43_3
           129_1: 23_1(fvec4)   FAdd 61_2 80_1
                                ReturnValue 129_1
           248_4:             Label
            65_2:   32_4(ptr) AccessChain 59_1 43_4
            61_3: 22_1(float) Load 65_2
           183_1:  20_1(bool) FUnordNotEqual 61_3 43_5
                              SelectionMerge 248_6 None
                              BranchConditional 183_1 248_5 248_6
           248_5:               Label
            61_4: 23_1(fvec4)   Load 59_3(a)
            80_2: 23_1(fvec4)   CompositeConstruct 43_1 43_1 43_1 43_1
           129_2: 23_1(fvec4)   FAdd 61_4 80_2
                                ReturnValue 129_2
           248_6:             Label
            65_3:   32_4(ptr) AccessChain 59_1 43_6
            61_5: 22_1(float) Load 65_3
           183_2:  20_1(bool) FUnordNotEqual 61_5 43_5
                              SelectionMerge 248_8 None
                              BranchConditional 183_2 248_7 248_8
           248_7:               Label
            61_6: 23_1(fvec4)   Load 59_3(a)
            80_3: 23_1(fvec4)   CompositeConstruct 43_7 43_7 43_7 43_7
           129_3: 23_1(fvec4)   FAdd 61_6 80_3
                                ReturnValue 129_3
           248_8:             Label
            65_4:   32_3(ptr) AccessChain 59_1 43_8
            61_7:   21_1(int) Load 65_4
           171_2:  20_1(bool) INotEqual 61_7 uint(0)
                              SelectionMerge 248_10 None
                              BranchConditional 171_2 248_9 248_10
           248_9:               Label
            61_8: 23_1(fvec4)   Load 59_3(a)
            80_4: 23_1(fvec4)   CompositeConstruct 43_9 43_9 43_9 43_9
           129_4: 23_1(fvec4)   FAdd 61_8 80_4
                                ReturnValue 129_4
          248_10:             Label
            65_5:   32_3(ptr) AccessChain 59_1 43_2
            61_9:   21_1(int) Load 65_5
           171_3:  20_1(bool) INotEqual 61_9 uint(0)
            65_6:   32_4(ptr) AccessChain 59_1 43_4
           61_10: 22_1(float) Load 65_6
           183_3:  20_1(bool) FUnordNotEqual 61_10 43_5
           167_1:  20_1(bool) LogicalAnd 171_3 183_3
            65_7:   32_4(ptr) AccessChain 59_1 43_6
           61_11: 22_1(float) Load 65_7
           183_4:  20_1(bool) FUnordNotEqual 61_11 43_5
           166_1:  20_1(bool) LogicalOr 167_1 183_4
                              SelectionMerge 248_12 None
                              BranchConditional 166_1 248_11 248_12
          248_11:               Label
           61_12: 23_1(fvec4)   Load 59_3(a)
            80_5: 23_1(fvec4)   CompositeConstruct 43_10 43_10 43_10 43_10
           129_5: 23_1(fvec4)   FAdd 61_12 80_5
                                ReturnValue 129_5
          248_12:             Label
            65_8:   32_4(ptr) AccessChain 59_1 43_4
           61_13: 22_1(float) Load 65_8
                              Store 59_4(f) 61_13
                              Branch 248_13
          248_13:             Label
                              LoopMerge 248_17 248_16 None
                              Branch 248_14
          248_14:             Label
           61_14: 22_1(float) Load 59_4(f)
           183_5:  20_1(bool) FUnordNotEqual 61_14 43_5
                              BranchConditional 183_5 248_15 248_17
          248_15:               Label
           61_15: 22_1(float)   Load 59_4(f)
           131_1: 22_1(float)   FSub 61_15 43_3
                                Store 59_4(f) 131_1
                                Branch 248_16
          248_16:               Label
                                Branch 248_13
          248_17:             Label
            65_9:   32_3(ptr) AccessChain 59_1 43_2
           61_16:   21_1(int) Load 65_9
                              Store 59_5(i) 61_16
                              Branch 248_18
          248_18:             Label
                              LoopMerge 248_21 248_20 None
                              Branch 248_19
          248_19:             Label
           61_17:   21_1(int) Load 59_5(i)
           130_1:   21_1(int) ISub 61_17 43_2
                              Store 59_5(i) 130_1
                              Branch 248_20
          248_20:             Label
           61_18:   21_1(int) Load 59_5(i)
           171_4:  20_1(bool) INotEqual 61_18 uint(0)
                              BranchConditional 171_4 248_18 248_21
          248_21:             Label
                              Branch 248_22
          248_22:             Label
                              LoopMerge 248_26 248_25 None
                              Branch 248_23
          248_23:             Label
           61_19:   21_1(int) Load 59_5(i)
           171_5:  20_1(bool) INotEqual 61_19 uint(0)
                              BranchConditional 171_5 248_24 248_26
          248_24:               Label
           61_20:   21_1(int)   Load 59_5(i)
           130_2:   21_1(int)   ISub 61_20 43_2
                                Store 59_5(i) 130_2
                                Branch 248_25
          248_25:               Label
                                Branch 248_22
          248_26:             Label
           65_10:   32_4(ptr) AccessChain 59_1 43_4
           61_21: 22_1(float) Load 65_10
           183_6:  20_1(bool) FUnordNotEqual 61_21 43_5
           169_1: 22_1(float) Select 183_6 43_11 43_12
                              Store 59_6(g) 169_1
           61_22: 22_1(float) Load 59_6(g)
           61_23: 23_1(fvec4) Load 59_3(a)
            80_6: 23_1(fvec4) CompositeConstruct 61_22 61_22 61_22 61_22
           129_6: 23_1(fvec4) FAdd 61_23 80_6
                              Store 59_3(a) 129_6
           61_24: 23_1(fvec4) Load 59_3(a)
            80_7: 23_1(fvec4) CompositeConstruct 43_3 43_3 43_3 43_3
           131_2: 23_1(fvec4) FSub 61_24 80_7
                              ReturnValue 131_2
                              FunctionEnd
